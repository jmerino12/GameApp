plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.dagger.hilt.android'
    id 'kotlin-kapt'
    id 'jacoco'
}

android {
    namespace 'com.example.gameapp'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.gameapp"
        minSdk 28
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    tasks.withType(Test).configureEach {
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
        finalizedBy(jacocoTestReport)
    }

    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.3.2'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['connectedAndroidTest','testDebugUnitTest',':dominio:testDebugUnitTest',':infraestructura:testDebugUnitTest']) {

    // Define modules from project
    def domain = project(':dominio')
    def infrastructure = project(':infraestructura')

    // Enable xml and html reports
    reports {
        xml.required = true
        html.required = true
    }

    // Filters
    def fileFilterInfrastructure = ['**/inyeccionDeDependencias/*','**/juego/clienteHttp/dto/*','**/juego/persistencia/entidad/*','**/juego/anticorrupcion/*']
    def fileFilterApp = ['**/ui/tema/*']
    def fileFilterDomain = ['**/dominio/excepciones/*']

    // Source directories and define general source
    def sourceDirectoriesFromApp = fileTree(dir: "${project.projectDir}/src/main/java", excludes: fileFilterApp)
    def sourceDirectoriesFromInfrastructure = fileTree(dir: "${infrastructure.projectDir}/src/main/java", excludes: fileFilterInfrastructure)
    def sourceDirectoriesFromDomain = fileTree(dir: "${domain.projectDir}/src/main/java", excludes: fileFilterDomain)
    def sourceDirectoriesFromAllModules = layout.files(sourceDirectoriesFromApp,sourceDirectoriesFromDomain,sourceDirectoriesFromInfrastructure)
    sourceDirectories.setFrom(files([sourceDirectoriesFromAllModules]))

    // Class directories and define general directories
    def classDirectoriesFromApp = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilterApp)
    def classDirectoriesFromInfrastructure = fileTree(dir: "${infrastructure.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilterInfrastructure)
    def classDirectoriesFromDomain = fileTree(dir: "${domain.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilterDomain)
    def classDirectoriesFromAllModules = layout.files(classDirectoriesFromApp,classDirectoriesFromDomain,classDirectoriesFromInfrastructure)
    classDirectories.setFrom(files([classDirectoriesFromAllModules]))

    // Execution files from test task
    def executionFileFromUnitTestInApp = fileTree(dir: "$buildDir", includes: ["outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec","outputs/code_coverage/debugAndroidTest/connected/**coverage.ec"])
    def executionFileFromUnitTestInDomain = fileTree(dir: "$domain.buildDir", includes: ["jacoco/testDebugUnitTest.exec"])
    def executionFileFromUnitTestInInfrastructure = fileTree(dir: "$infrastructure.buildDir", includes: ["jacoco/testDebugUnitTest.exec"])
    def executionFiles = layout.files(executionFileFromUnitTestInApp,executionFileFromUnitTestInDomain,executionFileFromUnitTestInInfrastructure)
    executionData.setFrom(executionFiles.asFileTree)
}

kapt {
    correctErrorTypes = true
}

dependencies {
    implementation project(':dominio')
    implementation project(':infraestructura')

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation platform('org.jetbrains.kotlin:kotlin-bom:1.8.0')
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation 'androidx.activity:activity-compose:1.5.1'
    implementation platform('androidx.compose:compose-bom:2022.10.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2022.10.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

    //Hilt
    implementation "com.google.dagger:hilt-android:2.44"
    kapt "com.google.dagger:hilt-compiler:2.44"

    //ViewModel con Compose
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:2.6.1"
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'
    implementation "androidx.lifecycle:lifecycle-runtime-compose:2.6.1"

    //Navegacion
    implementation "androidx.navigation:navigation-compose:2.6.0"

    //Coil
    implementation "io.coil-kt:coil-compose:2.4.0"
}